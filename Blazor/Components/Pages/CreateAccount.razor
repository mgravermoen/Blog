@page "/create-account"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

<PageTitle>Create Account</PageTitle>

<div class="main">
    <EditForm Model="@model" OnValidSubmit="Authenticate" FormName="LoginForm" autocomplete="off">
        <DataAnnotationsValidator />
        <div class="layout">
            <label>Username</label> 
        </div>
        <div class="layout">
            <InputText class="userInput" @bind-Value="model.Username"/>
             <ValidationMessage style="color: #191919; font-size: 30px; letter-spacing: -1px; font-weight: bold; text-align: center; text-decoration: underline; border: 2px solid #FF5C47; text-decoration-color: red; margin: 1px;" For="() => model.Username" />
        </div>
        <div class="layout">
            <label>Password</label>
        </div>
        <div class="layout">
            <InputText class="userInput" type="password" @bind-Value="model.Password" />
            <ValidationMessage style="color: #191919; font-size: 30px; letter-spacing: -1px; font-weight: bold; text-align: center; text-decoration: underline; border: 2px solid #FF5C47; text-decoration-color: red; margin: 1px;" For="() => model.Password" />
        </div>
        <div class="layout">
            <label>Confirm Password</label>
        </div>
        <div class="layout">
            <InputText class="userInput" type="password" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage style="color: #191919; font-size: 30px; letter-spacing: -1px; font-weight: bold; text-align: center; text-decoration: underline; border: 2px solid #FF5C47; text-decoration-color: red; margin: 1px;" For="() => model.ConfirmPassword" />
        </div>
        <br />
        <div class="layout">
            <button class="btn btn-primary" type="submit">Create Account</button>
            <a href="/" class="btn btn-primary login">Return to Login</a>
        </div>
    </EditForm>
</div>

@if (Error == true) 
{
    <br />
    <div class="error">@ErrorMessage</div>
}

<br /><br />

@code
{
    [Inject]
    NavigationManager nav { get; set; }

    [CascadingParameter]
    public HttpContext context { get; set; }

    [SupplyParameterFromForm]
    public CreateAccountModel model { get; set; } = new();

    [Inject]
    IAccountService accountService { get; set; }

    private bool Error { get; set; }
    private string ErrorMessage { get; set; }

    protected override void OnInitialized() {
        Error = false;
    }

    private async Task Authenticate()
    {
        bool doesUsernameExist = accountService.CheckUsername(model.Username);
        if (doesUsernameExist)
        {
            ErrorMessage = "INVALID USERNAME - That username already exists.";
            Error = true;
        }
        else
        {
            if (model.Password != model.ConfirmPassword)
            {
                ErrorMessage = "INVALID PASSWORD - Password don't macth.";
                Error = true;
            }
            else
            {
                accountService.CreateAccount(model.Username, model.Password);
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, model.Username),
                    new Claim(ClaimTypes.Role, accountService.GetRole(model.Username))
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                await context.SignInAsync(principal);
                nav.NavigateTo("/home");
            }
        }
    }
}